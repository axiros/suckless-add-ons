#!/usr/bin/env bash
# coding: utf-8

here="$(cd "$(dirname ${BASH_SOURCE[0]})"; pwd)"

# Must contain all themes. <plain_themename>.Xresources w/o #defines
# Should be created batchwise, by `st_theme -b` on a folder containing the full .Xresources files
theme=
custom=
export d_all="$ST_THEMES_DIR" 
export d_tmp="/tmp/st"
export fn_lock="/tmp/st/previewrunning"
export pid_fz= # This fzf window's st process id
export pid_st= # The target window's st process id (if wid_st is passed)
export old_theme= 
export wid_me="$WINDOWID" # fzf one if launched by hotkey
export wid_st= # passed by client, e.g. the st term where manual change them was started

url_b16_master="https://github.com/chriskempson/base16-schemes-source.git"

function notify { t="$1"; shift; dunstify -r 2342234 "st_theme: $t" "$*" 2>/dev/null; }
function die { echo "ERR: $*"; notify "$*"; exit 1; }

function clear_lock {
    rm -f "$fn_lock"
    test -z "$SUDO_USER" || chown -R "$SUDO_USER" "$d_tmp"
}

trap clear_lock EXIT

function pid_by_wid { xprop -id $1 |grep WM_PID | cut -d ' ' -f 3; }

function fzf_preview {
    # called on select, in bg
    trap clear_lock EXIT
    test -e "$fn_lock" && return || touch "$fn_lock"
    theme="$(echo "$1" | xargs)" # strip colors
    test -z "$theme" && exit # sometimes an empty line in fzf
    #dunstify -r 234541241 "$theme"
    set_theme "$theme" "$wid_st" "$pid_st"
    xdotool windowactivate "$wid_st"
    xdotool windowactivate "$wid_me"
    #test -e "/tmp/st/reloadlock" && return
    #touch "/tmp/st/reloadlock"
    #set_theme "$theme" "$wid_me" "$pid_fz"
    #echo "$theme" > "$d_tmp/theme"
    echo -e "\x1b[32mTheme:\t$old_theme -> $theme\nWIDs:\t$wid_st $wid_me\nPIDs:\t$pid_st $pid_fz\n"
    #echo -e "Alpha: $(get_alpha)"
    #echo -e "\x1b[1;38;5;1m asdf"
    clear_lock
}

# function prepare_wid_dir {
#     local d
#     local wid="$1"
#     local pid="$(pid_by_wid $wid)"
#     d="$d_tmp/$1"; mkdir -p "$d"
#     test "x$(cat $d/pid 2>/dev/null)" == "x$pid" || rm -f "$d/*"
#     mkdir -p "$d"
#     echo "$pid" > "$d/pid"
#     echo "$pid"
# }

function setup_read_old_values {
    pid_fz="$(prepare_wid_dir $wid_me)"
    pid_st="$(prepare_wid_dir $wid_st)"
    for d in "/$wid_st" "/"; do
        test -n "$old_theme" -o ! -e "$d_tmp/$d/theme" && continue 
        old_theme="$(cat "$d_tmp$d/theme")"
    done
    test -e "$d_tmp/$wid_st/alpha" || echo -n 1 > "$d_tmp/$wid_st/alpha" 
}

function set_theme {
    local theme="$1" wid="$2" pid="$3" custom="$4"
    local d="$d_tmp/$wid"
    local fnt="$d/xrdb"
    touch "$fnt"
    test -n "$theme" && {
        echo "$theme" > "$d_tmp/$wid/theme"
        cp "$ST_THEMES_DIR/$theme.xrdb" "$d_tmp/$wid/xrdb"
    }
    #echo -e "$custom" >> "$d_tmp/$wid/xrdb"
    kill -1 "$pid" # load it. st has a reload handler, reading the xrdb file
    # required to really redraw, seems to be async for not activated ones:
}


# ----------------------------------------------------------------------------- actions

function h {
    # action help display
      test "$3" == "-H" -o "$3" == "-h" && echo "$1" && { \
      test "$3" == "-h" -a -n "$2" && echo -e "\n$2" | sed -e 's/^    //g'; exit; }
}

function action_b16fetch {
    h 'Downloads all base16 schemes from the master list' \
      "We recursively down load from $url_b16_master" "$@"
    test -e "base16" && die "The base16 folder already exists in $(pwd)"
    git clone "$url_b16_master" base16 || die "Could not clone $url_b16_master"
    mkdir -p "./base16/schemes" 
    while read -r line; do
        [[ "$line" == \#* ]] && continue
        [[ -z "$line"     ]] && continue
        echo "$line" | grep http | grep ': ' >/dev/null || continue
        n="${line%%: *}"
        k="${line#*: }"
        echo "Fetching $n"
        git clone -q "$k" "./base16/schemes/$n"
        #nr="$nr."; test "$nr" == "..." && break
    done < "./base16/list.yaml"
    all="$(find base16/schemes -print | grep .yaml)"
    echo -e "$all"
    echo "$(echo "$all" | wc -l) theme fetched. Convert them via \`st_theme convert\`"
}

function action_b16convert {
    h 'Converts fetched base16 scheme yaml files into xrdb files' \
      'Must be called from a directory containing a base16/schemes folder, e.g. created by b16fetch' "$@"

    local d="./base16/schemes"
    local d_o="$(pwd)/base16/output/st_xrdb"
    local spec="/tmp/st_theme_spec"
    set -e
    test -e "$d" || die "Missing $d. Run \`st_theme b16fetch\`."
    mkdir -p "$d_o"
    for t in $(find base16/schemes -maxdepth 2 -print | grep .yaml); do
        echo "$t"
        sed -e 's/: /=/g' < "$t" > $spec
        source $spec
        dn="$(dirname "$t")"
        fn="$(basename "$t" | cut -d '.' -f 1)"
        repo="$(cd $dn && git remote get-url origin)"
        echo -e "
        ! Scheme:      $scheme
        ! Author:      $author
        ! Filename:    $fn
        ! Repo:        $repo

        *foreground:   #$base05
        *cursorColor:  #$base05
        *background:   #$base00

        *color0:       #$base00
        *color1:       #$base08
        *color2:       #$base0B
        *color3:       #$base0A
        *color4:       #$base0D
        *color5:       #$base0E
        *color6:       #$base0C
        *color7:       #$base05

        *color8:       #$base03
        *color9:       #$base08
        *color10:      #$base0B
        *color11:      #$base0A
        *color12:      #$base0D
        *color13:      #$base0E
        *color14:      #$base0C
        *color15:      #$base07

        *color16:      #$base09
        *color17:      #$base0F
        *color18:      #$base01
        *color19:      #$base02
        *color20:      #$base04
        *color21:      #$base06
        " | sed -e 's/^        //g' > "$d_o/$fn.xrdb"
    done
    rm -f "$spec"
    echo "Converted $(ls "$d_o" | wc -l) themes"
    
    test "$ST_THEMES_DIR" == "$d_o" || {
        echo -e 'For the theme selector to work you must finally add to e.g. your .bashrc:
        export ST_THEMES_DIR="'$(pwd)'/base16/output/st_xrdb"'
    }
    echo -e 'Preview:\nst_theme list '$d_o''
}


function action_list {
    h 'Show all themes, colored, sorted by contrast' \
      'ARGS:\njson: Prints a json list\npretty: Pretty prints it\nby_name: Sorts by name\n' "$@"
    themes 'with_line_sep' "$@"
}


function action_set {
    local d='ARGS:
    -t <theme>
    -w <windowid>
    -c <custom> (>1 allowed)

    EXAMPLE:
    set -c alpha:0.3" -c "background: 0000FF"
    (leaves the theme itself unchanged)
    '
    h 'Sets a theme and/or customizations at a window' "$d" "$@" 
    #pid="$(prepare_wid_dir "$wid_st")"
    set_theme "$theme" "$wid_st" "$pid_st" "$custom"
}


# function set_dir_theme {
#     source "$HOME/bin/wininfos"
#     wininfos "$wid_st"
#     d="${windir:-`pwd`}"
#     echo "$1" | xargs > "$d/.terminal_theme"
#     notify-send "Have set directory theme" "$1 for $d."
#     exit
# }

# function apply_other_st {
#     local theme="$1"
#     local d
#     local have="$wid_st "
#     echo -e "Click on each window you want $(echo "$1"|xargs) to be applied.\nClick again a window to to back."
#     while true; do
#         w="$(xdotool selectwindow)"
#         echo "$have" | grep "$w" && break
#         have="$w $have"
#         apply_at_wid "$w"
#     done
# }
# function apply_at_wid {
#     d="$d_tmp/$1"
#     mkdir -p "$d"
#     cp -a $d_tmp/$wid_st/* $d/
#     pid_by_wid $1 > "$d/pid"
#     kill -1 $(cat "$d/pid")
# }


# -------------------------------------------------------------------------------- main

function usage {
    loop_action_help () {
        actions="$(f="$f"; cat "$0" | grep "^function action_" | cut -d '_' -f 2- | cut -d ' ' -f 1)"
        for a in $actions; do test "$a" != "help" && { echo -en "\x1b[1m$a\x1b[0m\n\t\t"; $0 $a -H; }; done
    }
    echo -e "Theme Selector for st (Suckless Terminal)
    
    USAGE: st_theme [action] [switches]

    ACTIONS (default: start fzf selector):

    $(loop_action_help)

    Default action: Start fzf selector on windowid given via switch -w
    st_theme <action name> -h: Detailed help on actions.

    " | sed -e 's/^    //g'
    exit ${1:-0} 
}


function main {
    test -z "$1" && usage
    [[ "$1" == -* ]] && action= || { action="$1"; shift; }
    while getopts "Hc:ht:w:" opt; do
        case ${opt} in
            h) [[ -n "$action" ]] || usage
                ;;
            H)  ;; # not detailed action help (called by usage)
            t) theme="$OPTARG"
                ;;
            w) wid_st="$OPTARG"
                ;;
            c) custom="$custom\n$OPTARG"
                ;;
            *) usage 1
                ;;
        esac
    done
    test -z "$wid_st" && wid_st=$wid_me # called standalone
    test -n "$action" && { 
        test -z "action_$action" && usage
        action_$action "$@"
        exit $?
    }
    clear_lock 

    setup_read_old_values
    echo "$wid_st"
    #ls "$d_all" | cut -d '-' -f2- | cut -d '.' -f1 | fzf \
    #alpha -0.3
    themes | fzf \
        --preview-window=up:10% \
        --ansi \
        --header="Enter: Set theme as default. L/R: Alpha. alt-p: Apply elsewhere. alt-r: Record as dir theme" \
        --no-info \
        --color='bg:232,marker:196' \
        --bind="alt-r:execute(set_dir_theme {}),alt-p:execute(apply_other_st {}),left:execute-silent(alpha -0.05 {}),right:execute-silent(alpha 0.05 {})" \
        --preview="fzf_preview {} " || return 1
        #--cycle \
    # on accept we write it as default for all:
    cp "$d_tmp/$wid_st/xrdb" "/tmp/st/xrdb"
    cp "$d_tmp/$wid_st/theme" "/tmp/st/theme"
}

# -------------------------------------------------------------------------------Python
# we keep that at the end to not confuse single ft colorscheme vim setups

function get_alpha { cat $d_tmp/$wid_st/alpha | cut -c -4; }

function alpha {
    # left - right button increases/decreases:
    local fn="$d_tmp/$wid_st/alpha"
    local a="$(cat "$fn")"
    python -Ssc "a=float('$a'.strip()); a+=$1; print(max(0, min(a, 1)))" >  "$fn" 2>/dev/null
    dunstify -r 987234209 "Alpha" "$(get_alpha)" >/dev/null 2>/dev/null
    fzf_preview "$2" >/dev/null 2>/dev/null
}

function themes {
    # Prints to stdout the fzf entries, with colors - on demand since fast enough.
    # not in use for direct settings
    python -Ssc "if 1:
    import os, math, sys
    argv = sys.argv
    b=breakpoint
    themes = {}
    SL = '                          '
    bg, fg = 0, 5
    theme_name_by_fn = lambda fn: fn.replace('.xrdb', '')
    old = None

    def rgb(hexc):
        return tuple(int(hexc[1:][i:i+2], 16) for i in (0, 2, 4))

    def add_col(into, b16nr, hexc):
        R, G, B = r = rgb(hexc)
        into[b16nr] = m = {'hex': hexc, 'rgb': r}
        # https://stackoverflow.com/a/596243
        if b16nr in (bg, fg):
            into['lum_%s' % b16nr] = math.sqrt( 0.299*R**2 + 0.587*G**2 + 0.114*B**2 )

    def add_theme(fn, defs):
        m = {}
        for l in defs.splitlines():
            if l.startswith('! Repo: '):
                m['repo'] = l.split()[2]
            elif l.startswith('*color'):
                l = l.split()
                if len(l) == 2:
                    add_col(m, int(l[0].replace('*color', '').replace(':', '')), l[1])
        m['name'] = fn
        bglum = m['lum_0']
        fglum = m['lum_5']
        k = m['contrast'] = bglum - fglum
        if 'by_name' in argv:
            themes[fn] = m
        else:
            # cheap conflict resolution:
            while k in themes:
                k += 0.001
            themes[k] = m
            if fn == '$old_theme':
                global old
                old = m

    fn_all = [fn for fn in os.listdir('$d_all') if fn.endswith('.xrdb')]
    for fn in fn_all:
        with open('$d_all/' + fn) as fd:
            s = fd.read().strip()
        add_theme(theme_name_by_fn(fn), s)

    if 'json' in argv:
        import json, functools
        d = functools.partial(json.dumps, indent=2) if 'pretty' in argv else json.dumps 
        print(d(sorted(themes.items())))
        sys.exit(0)

    # order by bg lum:
    lines = []
    def to_line(theme, col_spc='\033[48;2;%s;%s;%sm  '):
        l = '\033[0m'
        l += ''.join([col_spc % theme[k]['rgb'] for k in range(22)])
        l += '\033[0m ' + col_spc % theme[0]['rgb'] + col_spc.replace('[48', '[38') % theme[5]['rgb']
        return l + (theme['name'] + SL)[:30] + '\033[0m' 

    # sorted by luminance:
    for k in sorted(themes):
        lines.append(to_line(themes[k]))
        if 'with_line_sep' in argv:
            lines.append('')
    if old:
        # current theme should be autoselected, at end of list
        lines.insert(0, to_line(old))
    [print(l) for l in lines]
    " "$@"
}


#export -f apply_at_wid
#export -f apply_other_st
export -f clear_lock
export -f fzf_preview
export -f set_theme
#export -f set_dir_theme
export -f pid_by_wid

main "$@"
