#!/usr/bin/env bash
# coding: utf-8

export d_all="/home/gk/inst/base16/output/xresources/xresources"
export d_st="/tmp/st"
export fn_lock="/tmp/st/previewrunning"
export pid_fz= # This fzf window's st process id
export pid_st= # The target window's st process id (if wid_st is passed)
export old_theme= 
export wid_fz="$WINDOWID"
export wid_st= # passed by client, e.g. the st term where manual change them was started

function clear_lock {
    rm -f "$fn_lock"
    test -z "$SUDO_USER" || chown -R "$SUDO_USER" "$d_st"
}

trap clear_lock EXIT

function pid_by_wid { xprop -id $1 |grep WM_PID | cut -d ' ' -f 3; }

function set_theme {
    local theme="$1" wid="$2" pid="$3"
    echo "$theme" > "$d_st/$wid/theme"
    write_xrdb "$d_all" "$theme" "$d_st/$wid/xrdb" || exit 1 # very rarely $theme is empty
    kill -1 $pid # load it. st has a reload handler, reading the xrdb file
    # required to really redraw, seems to be async for not activated ones:

}

function set_theme_directly {
    # called from command line, no fzf wanted. 
    pid="$(prepare_wid_dir "$WINDOWID")"
    set_theme "$1" "$WINDOWID" "$pid"
}

function fzf_preview {
    # called on select, in bg
    trap clear_lock EXIT
    test -e "$fn_lock" && return || touch "$fn_lock"
    theme="$(echo "$1" | xargs)" # strip colors
    test -z "$theme" && exit # sometimes an empty line in fzf
    #dunstify -r 234541241 "$theme"
    set_theme "$theme" "$wid_st" "$pid_st"
    xdotool windowactivate "$wid_st"
    xdotool windowactivate "$wid_fz"
    #test -e "/tmp/st/reloadlock" && return
    #touch "/tmp/st/reloadlock"
    #set_theme "$theme" "$wid_fz" "$pid_fz"
    #echo "$theme" > "$d_st/theme"
    echo -e "\x1b[32mTheme:\t$old_theme -> $theme\nWIDs:\t$wid_st $wid_fz\nPIDs:\t$pid_st $pid_fz\n"
    #echo -e "Alpha: $(get_alpha)"
    #echo -e "\x1b[1;38;5;1m asdf"
    clear_lock
}

function prepare_wid_dir {
    local d
    local wid="$1"
    local pid="$(pid_by_wid $wid)"
    d="$d_st/$1"; mkdir -p "$d"
    test "x$(cat $d/pid 2>/dev/null)" == "x$pid" || rm -f "$d/*"
    mkdir -p "$d"
    echo "$pid" > "$d/pid"
    echo "$pid"
}

function setup_read_old_values {
    pid_fz="$(prepare_wid_dir $wid_fz)"
    pid_st="$(prepare_wid_dir $wid_st)"
    for d in "/$wid_st" "/"; do
        test -n "$old_theme" -o ! -e "$d_st/$d/theme" && continue 
        old_theme="$(cat "$d_st$d/theme")"
    done
    test -e "$d_st/$wid_st/alpha" || echo -n 1 > "$d_st/$wid_st/alpha" 
}

function main {
    clear_lock
    theme=
    while getopts "p:w:ct:" opt; do
        case ${opt} in
            w) wid_st="$OPTARG"
                ;;
            p) xx="$OPTARG" # no in use, set auto
                ;;
            c) themes; exit $? # just print the colors (debugging)
                ;; 
            t) theme="$OPTARG" # sets the theme  into the current window (no select)
                ;;
        esac
    done
    test -z "$wid_st" && wid_st=$wid_fz # called standalone
    test -n "$theme" && { set_theme_directly "$theme"; exit $?; }

    setup_read_old_values
    echo "$wid_st"
    #ls "$d_all" | cut -d '-' -f2- | cut -d '.' -f1 | fzf \
    #alpha -0.3
    themes | fzf \
        --preview-window=up:10% \
        --ansi \
        --header="Enter: Set theme as default. L/R: Alpha. alt-p: Apply elsewhere. alt-r: Record as dir theme" \
        --no-info \
        --color='bg:232,marker:196' \
        --bind="alt-r:execute(set_dir_theme {}),alt-p:execute(apply_other_st {}),left:execute-silent(alpha -0.05 {}),right:execute-silent(alpha 0.05 {})" \
        --preview="fzf_preview {} " || return 1
        #--cycle \
    # on accept we write it as default for all:
    cp "$d_st/$wid_st/xrdb" "/tmp/st/xrdb"
    cp "$d_st/$wid_st/theme" "/tmp/st/theme"
}

function set_dir_theme {
    source "$HOME/bin/wininfos"
    wininfos "$wid_st"
    d="${windir:-`pwd`}"
    echo "$1" | xargs > "$d/.terminal_theme"
    notify-send "Have set directory theme" "$1 for $d."
    exit
}

function apply_other_st {
    local theme="$1"
    local d
    local have="$wid_st "
    echo -e "Click on each window you want $(echo "$1"|xargs) to be applied.\nClick again a window to to back."
    while true; do
        w="$(xdotool selectwindow)"
        echo "$have" | grep "$w" && break
        have="$w $have"
        apply_at_wid "$w"
    done
}
function apply_at_wid {
    d="$d_st/$1"
    mkdir -p "$d"
    cp -a $d_st/$wid_st/* $d/
    pid_by_wid $1 > "$d/pid"
    kill -1 $(cat "$d/pid")
}

return 2>/dev/null || true

# -------------------------------------------------------------------------------Python

function get_alpha { cat $d_st/$wid_st/alpha | cut -c -4; }

function alpha {
    # left - right button increases/decreases:
    local fn="$d_st/$wid_st/alpha"
    local a="$(cat "$fn")"
    python -Ssc "a=float('$a'.strip()); a+=$1; print(max(0, min(a, 1)))" >  "$fn" 2>/dev/null
    dunstify -r 987234209 "Alpha" "$(get_alpha)" >/dev/null 2>/dev/null
    fzf_preview "$2" >/dev/null 2>/dev/null
}


function themes {
    # creates the fzf entries, with colors
    python -Ssc "if 1:
    import os, math
    themes = {}
    SL = '                          '
    H = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F']
    bg, fg = '00', '05'
    theme_name_by_fn = lambda fn: fn.replace('base16-', '').replace('-256.Xresources', '')
    old = None

    def rgb(hexc):
        return tuple(int(hexc[1:][i:i+2], 16) for i in (0, 2, 4))

    def add_col(into, b16nr, hexc):
        R, G, B = r = rgb(hexc)
        into[b16nr] = m = {'hex': hexc, 'rgb': r}
        # https://stackoverflow.com/a/596243
        if b16nr in (bg, fg):
            into['lum_%s' % b16nr] = math.sqrt( 0.299*R**2 + 0.587*G**2 + 0.114*B**2 )

    def add_theme(fn, defs):
        m = {}
        for l in defs.splitlines():
            l = l.split('#define base', 1)[1].split(' ')
            add_col(m, l[0], l[1])
        m['name'] = fn
        bglum = m['lum_00']
        fglum = m['lum_05']
        k = bglum - fglum
        while k in themes:
            k += 0.001
        themes[k] = m
        if fn == '$old_theme':
            global old
            old = m

    fn_all = [fn for fn in os.listdir('$d_all') if fn.endswith('-256.Xresources')]
    for fn in fn_all:
        if not fn.endswith('-256.Xresources'): continue
        with open('$d_all/' + fn) as fd:
            s = fd.read().lstrip().split('#defin', 1)[1].strip().split('\n\n', 1)[0]
            s = '#defin' + s
        add_theme(theme_name_by_fn(fn), s)
    # order by bg lum:
    lines = []
    def to_line(theme, col_spc='\033[48;2;%s;%s;%sm  '):
        l = '\033[0m'
        l += ''.join([col_spc % theme[k]['rgb'] for k in H])
        l += '\033[0m ' + col_spc % theme['00']['rgb'] + col_spc.replace('[48', '[38') % theme['05']['rgb']
        return l + (theme['name'] + SL)[:30] + '\033[0m' 
        
    for k in sorted(themes):
        lines.append(to_line(themes[k]))
    if old:
        # current theme should be autoselected, at end of list
        lines.insert(0, to_line(old))
    [print(l) for l in lines]
    "
}

function write_xrdb {
    # replace the color->define indirections with values, so that we don't have to xrdb load it
    # (in x.c of st we can load that string directly w/o having to change xrdb on the Xserver)
    python -Ssc "if 1:
    import os, sys
    d_all, t, dest='$1', '$2'.strip(), '$3'
    m = {}
    r = []
    fn = d_all + '/base16-%s-256.Xresources' % t
    if not os.path.exists(fn):
        os.system('notify-send \"Not found\" \"%s\"' % fn)
        sys.exit(1)
    else:
        with open(fn) as fd: s = fd.read().splitlines()
        for l in s:
            if l.startswith('#define'):
                k = l.split()
                m[k[1]] = k[2]
            else:
                r.append(l)
        #r.append('*alpha: $alpha')
        r.append('')
        r = '\n'.join(r)
        for k, v in m.items():
            r = r.replace(k, v)
        fn = dest.replace('/xrdb', '/alpha')
        if os.path.exists(fn):
            alpha = float(open(fn).read().strip())
            r += '\n*alpha: %.2f' % alpha
        with open(dest, 'w') as fd:
            fd.write(r)
    "
}

export -f alpha
export -f apply_at_wid
export -f apply_other_st
export -f clear_lock
export -f fzf_preview
export -f get_alpha
export -f set_theme
export -f set_dir_theme
export -f pid_by_wid
export -f write_xrdb

main "$@"
